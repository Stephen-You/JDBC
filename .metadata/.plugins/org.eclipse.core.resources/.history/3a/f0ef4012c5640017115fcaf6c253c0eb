package com.customer.dao;

import java.sql.SQLException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import org.apache.commons.dbutils.handlers.ScalarHandler;

import com.customer.domain.Customer;
import com.customer.domain.PageBean;

import cn.itcast.jdbc.TxQueryRunner;

/**
 * 数据层
 * @author Yorick
 *
 */
public class CustomerDao {
	//创建QueryRunner对象
	private QueryRunner qr = new TxQueryRunner();
	/**
	 * 插入用户
	 */
	public void add(Customer cstm){
		try {
			//给出SQL模板
			String insert = "insert into customer values(?,?,?,?,?,?,?)";
			//给出SQL模板中对应的问号的值
			Object[] objects = {cstm.getCid(),cstm.getCname(),cstm.getGender(),cstm.getBirthday()
					,cstm.getCellphone(),cstm.getEmail(),cstm.getDescription()};
			//更新数据库
			qr.update(insert,objects);
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}
	/**
	 * 查询所有客户
	 */
//	public List<Customer> findAll(){
//		try {
//			//SQL模板
//			String select = "select * from customer";
//			return qr.query(select, new BeanListHandler<Customer>(Customer.class));
//		} catch (SQLException e) {
//			throw new RuntimeException(e);
//		}
//	}
	/**
	 * 分页查询
	 * 我们在list页面发现,会将数据库中,所有的用户信息都显示出来,但如果数据库中有几亿条数据,此时怎么做呢,分页或许是最好的手段
	 */
	//传入参数为每页记录数和当前页码
	public PageBean<Customer> findAll(int cp,int ps){
		
		try {
			//得到所有记录的数目
			String sql = "select count(*) from customer";
			Number num = (Number) qr.query(sql, new ScalarHandler());
			int tr = num.intValue();
			//得到当前页面数据
			sql = "select * from customer limit ?,?";
			//第一页,显示第1到第10条数据,第二页是11到20,(pagenumber-1)*10
			Object[] objects = {(cp-1)*ps,ps};
			List<Customer> beans = qr.query(sql, new BeanListHandler<Customer>(Customer.class),objects);
			/*
			 * 3. 使用tr、beans、cp、ps创建PageBean，返回！
			 */
			PageBean<Customer> pb = new PageBean<>();
			pb.setBeans(beans);
			pb.setCp(cp);
			pb.setTr(tr);
			pb.setPs(ps);
			return pb;
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	/**
	 * 按cid查询客户
	 */
	public Customer load(String cid){	
		try {
			//SQL模板
			String select = "select * from customer where cid=?";
			return qr.query(select, new BeanHandler<Customer>(Customer.class),cid);
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}
	/**
	 * 修改用户
	 */
	public void edit(Customer cstm){
		try {
			String update = "update customer set cname=?,gender=?,birthday=?,cellphone=?" +
					", email=?, description=? where cid=?";
			Object[] params = {cstm.getCname(), cstm.getGender(),
				cstm.getBirthday(), cstm.getCellphone(), cstm.getEmail(),
				cstm.getDescription(), cstm.getCid()};
			qr.update(update, params);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	/**
	 * 删除用户信息
	 */
	public void delete(String cid){
		try {
			String delete = "delete from customer where cid=?";
			qr.update(delete, cid);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	
	/**
	 * 多条件组合查询
	 */
	
}
